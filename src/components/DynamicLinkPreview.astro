---
export interface Props {
  url: string;
  fallbackTitle?: string;
  fallbackDescription?: string;
  hardcodedImage?: string;
}

const { url, fallbackTitle, fallbackDescription, hardcodedImage } = Astro.props;

// Helper to get domain name for display
const getDomainName = (urlString: string) => {
  try {
    return new URL(urlString).hostname.replace('www.', '');
  } catch (e) {
    return urlString;
  }
};

const domain = getDomainName(url);
---

<div class="dynamic-link-preview-container">
  <a 
    href={url} 
    target="_blank" 
    rel="noopener noreferrer"
    class="link-preview-trigger"
  >
    <slot />
  </a>
  
  <div class="dynamic-link-preview-popup" data-url={url} data-hardcoded-image={hardcodedImage}>
    <div class="preview-content">
      <div class="preview-image">
        <div class="image-placeholder">
          <div class="loading-spinner"></div>
        </div>
        <img src="" alt="Link preview" class="preview-image-tag" style="display: none;" />
      </div>
      <div class="preview-text">
        <div class="preview-domain">{domain}</div>
        <h4 class="preview-title">{fallbackTitle || domain}</h4>
        <p class="preview-description">{fallbackDescription || 'Click to visit this website'}</p>
      </div>
    </div>
  </div>
</div>

<style>
  .dynamic-link-preview-container {
    position: relative;
    display: inline-block;
  }
  
  .link-preview-trigger {
    text-decoration: none;
    color: inherit;
  }
  
  .dynamic-link-preview-popup {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 8px;
    width: 350px;
    background: rgba(15, 23, 42, 0.95);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 12px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(20px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
    pointer-events: none;
    overflow: hidden;
  }
  
  .dynamic-link-preview-container:hover .dynamic-link-preview-popup {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-4px);
  }
  
  .preview-content {
    border-radius: 12px;
    overflow: hidden;
  }
  
  .preview-image {
    width: 100%;
    height: 180px;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(168, 85, 247, 0.1));
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }
  
  .image-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }

  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(59, 130, 246, 0.3);
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  .preview-image-tag {
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
  }
  
  .preview-text {
    padding: 16px;
  }
  
  .preview-domain {
    font-size: 0.75rem;
    color: var(--arclab-gray-400);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 6px;
  }
  
  .preview-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: white;
    margin: 0 0 8px 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .preview-description {
    font-size: 0.75rem;
    color: var(--arclab-gray-300);
    margin: 0;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* Arrow */
  .dynamic-link-preview-popup::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-top-color: rgba(15, 23, 42, 0.95);
  }
  
  @media (max-width: 768px) {
    .dynamic-link-preview-popup {
      width: 300px;
      left: 0;
      transform: none;
    }
    
    .dynamic-link-preview-container:hover .dynamic-link-preview-popup {
      transform: translateY(-4px);
    }
    
    .dynamic-link-preview-popup::after {
      left: 20px;
      transform: none;
    }
  }
</style>

<script>
  class DynamicLinkPreviewManager {
    constructor() {
      this.cache = new Map();
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.init());
      } else {
        this.init();
      }
    }
    
    init() {
      const popups = document.querySelectorAll('.dynamic-link-preview-popup');
      popups.forEach(popup => {
        this.loadPreview(popup);
      });
    }
    
    async loadPreview(popup) {
      const url = popup.dataset.url;
      const hardcodedImage = popup.dataset.hardcodedImage;
      
      if (!url) return;
      
      if (hardcodedImage && hardcodedImage !== 'undefined') {
        this.renderImage(popup, hardcodedImage);
        return;
      }
      
      if (this.cache.has(url)) {
        this.renderImage(popup, this.cache.get(url));
        return;
      }
      
      try {
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`;
        const response = await fetch(proxyUrl);
        const data = await response.json();
        const html = data.contents;
        
        if (!html) {
          throw new Error('No HTML content found');
        }
        
        const imageUrl = this.extractMetaTag(html, 'og:image') || this.extractMetaTag(html, 'twitter:image');
        
        if (imageUrl) {
          this.cache.set(url, imageUrl);
          this.renderImage(popup, imageUrl);
        } else {
          this.renderImage(popup, null); // No image found
        }
      } catch (error) {
        console.warn(`Failed to fetch preview for ${url}:`, error);
        this.renderImage(popup, null); // Fallback on error
      }
    }
    
    renderImage(popup, imageUrl) {
      const imageTag = popup.querySelector('.preview-image-tag');
      const placeholder = popup.querySelector('.image-placeholder');
      
      if (imageUrl && imageTag && placeholder) {
        imageTag.src = imageUrl;
        imageTag.style.display = 'block';
        imageTag.onload = () => {
          placeholder.style.display = 'none';
        };
        imageTag.onerror = () => {
          placeholder.style.display = 'flex'; // Keep placeholder if image fails
          imageTag.style.display = 'none';
        };
      } else if (placeholder) {
        placeholder.innerHTML = '<span style="font-size: 2rem; color: rgba(255,255,255,0.3);">ðŸ“„</span>';
      }
    }

    extractMetaTag(html, property) {
      const el = document.createElement('html');
      el.innerHTML = html;
      const meta = el.querySelector(`meta[property="${property}"], meta[name="${property}"]`);
      return meta ? meta.getAttribute('content') : null;
    }
  }

  new DynamicLinkPreviewManager();
</script>