---
export interface Props {
  url: string;
  fallbackTitle?: string;
  fallbackDescription?: string;
  hardcodedImage?: string; // New prop for hardcoded images
}

const { url, fallbackTitle, fallbackDescription, hardcodedImage } = Astro.props;
---

<div class="dynamic-link-preview-container">
  <a 
    href={url} 
    target="_blank" 
    rel="noopener noreferrer"
    class="link-preview-trigger"
    data-url={url}
    data-fallback-title={fallbackTitle}
    data-fallback-description={fallbackDescription}
    data-hardcoded-image={hardcodedImage}
  >
    <slot />
  </a>
  
  <div class="dynamic-link-preview-popup">
    <div class="preview-loading">
      <div class="loading-spinner"></div>
      <span>Loading preview...</span>
    </div>
    <div class="preview-content" style="display: none;">
      <!-- Content will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .dynamic-link-preview-container {
    position: relative;
    display: inline-block;
  }
  
  .link-preview-trigger {
    text-decoration: none;
    color: inherit;
  }
  
  .dynamic-link-preview-popup {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    margin-bottom: 8px;
    width: 350px;
    background: rgba(15, 23, 42, 0.95);
    border: 1px solid rgba(59, 130, 246, 0.3);
    border-radius: 12px;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(20px);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
    pointer-events: none;
  }
  
  .dynamic-link-preview-container:hover .dynamic-link-preview-popup {
    opacity: 1;
    visibility: visible;
    transform: translateX(-50%) translateY(-4px);
  }
  
  .preview-loading {
    padding: 20px;
    text-align: center;
    color: var(--arclab-gray-300);
    font-size: 0.875rem;
  }
  
  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(59, 130, 246, 0.3);
    border-top: 2px solid #3b82f6;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 8px;
  }
  
  .preview-content {
    border-radius: 12px;
    overflow: hidden;
  }
  
  .preview-image {
    width: 100%;
    height: 180px;
    overflow: hidden;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(168, 85, 247, 0.1));
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .preview-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .preview-image-placeholder {
    color: rgba(255, 255, 255, 0.3);
    font-size: 3rem;
  }
  
  .preview-text {
    padding: 16px;
  }
  
  .preview-domain {
    font-size: 0.75rem;
    color: var(--arclab-gray-400);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 6px;
  }
  
  .preview-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: white;
    margin: 0 0 8px 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .preview-description {
    font-size: 0.75rem;
    color: var(--arclab-gray-300);
    margin: 0;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .preview-error {
    padding: 20px;
    text-align: center;
    color: var(--arclab-gray-400);
    font-size: 0.875rem;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* Arrow */
  .dynamic-link-preview-popup::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-top-color: rgba(15, 23, 42, 0.95);
  }
  
  @media (max-width: 768px) {
    .dynamic-link-preview-popup {
      width: 300px;
      left: 0;
      transform: none;
    }
    
    .dynamic-link-preview-container:hover .dynamic-link-preview-popup {
      transform: translateY(-4px);
    }
    
    .dynamic-link-preview-popup::after {
      left: 20px;
      transform: none;
    }
  }
</style>

<script>
  class DynamicLinkPreview {
    constructor() {
      this.cache = new Map();
      this.init();
    }
    
    init() {
      const containers = document.querySelectorAll('.dynamic-link-preview-container');
      containers.forEach(container => {
        const trigger = container.querySelector('.link-preview-trigger');
        const popup = container.querySelector('.dynamic-link-preview-popup');
        
        if (trigger && popup) {
          let hoverTimeout;
          let isLoaded = false;
          
          trigger.addEventListener('mouseenter', () => {
            if (!isLoaded) {
              hoverTimeout = setTimeout(() => {
                this.loadPreview(trigger, popup);
                isLoaded = true;
              }, 500);
            }
          });
          
          trigger.addEventListener('mouseleave', () => {
            clearTimeout(hoverTimeout);
          });
        }
      });
    }
    
    async loadPreview(trigger, popup) {
      const url = trigger.dataset.url;
      const fallbackTitle = trigger.dataset.fallbackTitle;
      const fallbackDescription = trigger.dataset.fallbackDescription;
      const hardcodedImage = trigger.dataset.hardcodedImage;
      
      if (!url) return;
      
      if (this.cache.has(url)) {
        this.renderPreview(this.cache.get(url), popup);
        return;
      }
      
      try {
        // Try to fetch metadata using a CORS proxy or direct fetch
        const metadata = await this.fetchMetadata(url, fallbackTitle, fallbackDescription, hardcodedImage);
        this.cache.set(url, metadata);
        this.renderPreview(metadata, popup);
      } catch (error) {
        console.error('Failed to load preview:', error);
        // Use fallback data
        const fallbackData = {
          title: fallbackTitle || this.getDomainName(url),
          description: fallbackDescription || 'Click to visit this website',
          domain: this.getDomainName(url),
          image: hardcodedImage || null
        };
        this.renderPreview(fallbackData, popup);
      }
    }
    
    async fetchMetadata(url, fallbackTitle, fallbackDescription, hardcodedImage) {
      // If hardcoded image is provided, use it and try to get other metadata
      
      // Method 1: Use a public metadata API service
      try {
        const apiUrl = `https://api.microlink.io/?url=${encodeURIComponent(url)}`;
        const response = await fetch(apiUrl);
        
        if (response.ok) {
          const data = await response.json();
          if (data.status === 'success') {
            return {
              title: data.data.title || fallbackTitle || this.getDomainName(url),
              description: this.cleanDescription(data.data.description) || fallbackDescription || '',
              domain: this.getDomainName(url),
              image: hardcodedImage || data.data.image?.url || null // Prioritize hardcoded image
            };
          }
        }
      } catch (e) {
        console.log('API fetch failed');
      }
      
      // Method 2: Fallback to domain-specific hardcoded data
      return this.getHardcodedMetadata(url, fallbackTitle, fallbackDescription, hardcodedImage);
    }
    
    cleanDescription(description) {
      if (!description) return '';
      
      // First, handle the raw text and remove any HTML-like patterns
      let cleaned = description;
      
      // Remove HTML tags completely
      cleaned = cleaned.replace(/<[^>]*>/g, '');
      
      // Decode HTML entities using a more robust method
      const parser = new DOMParser();
      const doc = parser.parseFromString(cleaned, 'text/html');
      cleaned = doc.documentElement.textContent || cleaned;
      
      // Remove the specific problematic patterns at the start
      cleaned = cleaned
        .replace(/^["\s]*>\s*/, '')     // Remove "> at start (the main issue)
        .replace(/^["\s]*\/>\s*/, '')   // Remove "/> at start
        .replace(/^["\s]*\]\s*/, '')    // Remove "] at start
        .replace(/^["\s]*\}\s*/, '')    // Remove "} at start
        .replace(/^["\s]*\)\s*/, '')    // Remove ") at start
        .replace(/^["\s]*\|\s*/, '')    // Remove "| at start
        .replace(/^["\s]*-\s*/, '')     // Remove "- at start
        .replace(/^["\s]*:\s*/, '')     // Remove ": at start
        .replace(/^["\s]*;\s*/, '')     // Remove "; at start
        .replace(/^["\s]*,\s*/, '')     // Remove ", at start
        .replace(/^["\s]*\.\s*/, '')    // Remove ". at start
        .replace(/^\s*['"]\s*/, '')     // Remove quotes at start
        .replace(/\s*['"]\s*$/, '')     // Remove quotes at end
        .replace(/\s+/g, ' ')           // Normalize all whitespace
        .trim();                        // Remove leading/trailing whitespace
      
      // Additional cleanup for common web scraping artifacts
      cleaned = cleaned
        .replace(/^(Read more|Learn more|Click here|More info|Continue reading)[\s\.:]*/, '')
        .replace(/^(Home|About|Contact|News|Blog)[\s\|>-]*/, '')
        .replace(/^(Skip to|Jump to|Go to)[\s\w]*/, '');
      
      // If the description is too short after cleaning, return empty
      if (cleaned.length < 10) {
        return '';
      }
      
      // Limit length and add ellipsis if needed
      if (cleaned.length > 200) {
        cleaned = cleaned.substring(0, 200);
        // Try to break at a word boundary
        const lastSpace = cleaned.lastIndexOf(' ');
        if (lastSpace > 150) {
          cleaned = cleaned.substring(0, lastSpace);
        }
        cleaned += '...';
      }
      
      return cleaned;
    }
    
    getHardcodedMetadata(url, fallbackTitle, fallbackDescription, hardcodedImage) {
      const domain = this.getDomainName(url);
      
      // Domain-specific metadata
      const domainData = {
        'll.mit.edu': {
          title: 'MIT Lincoln Laboratory',
          description: 'MIT Lincoln Laboratory develops advanced technology solutions for national security.',
          image: hardcodedImage || null
        },
        'upm.es': {
          title: 'Universidad Politécnica de Madrid',
          description: 'Leading technical university in Spain, excellence in engineering and technology education.',
          image: hardcodedImage || null
        },
        'kspdg.com': {
          title: 'Kerbal Space Program Differential Games Challenge',
          description: 'International AI competition for autonomous spacecraft control algorithms.',
          image: hardcodedImage || null
        },
        'aeroastro.mit.edu': {
          title: 'MIT Aeronautics and Astronautics',
          description: 'Leading aerospace engineering education and research at MIT.',
          image: hardcodedImage || null
        },
        'etsisi.upm.es': {
          title: 'ETSISI - UPM',
          description: 'School of Computer Systems Engineering at Universidad Politécnica de Madrid.',
          image: hardcodedImage || null
        }
      };
      
      const data = domainData[domain] || {
        title: fallbackTitle || domain,
        description: fallbackDescription || 'Visit this website for more information.',
        image: hardcodedImage || null
      };
      
      return {
        ...data,
        domain: domain
      };
    }
    
    getDomainName(url) {
      try {
        return new URL(url).hostname.replace('www.', '');
      } catch {
        return 'External Link';
      }
    }
    
    renderPreview(data, popup) {
      const loadingEl = popup.querySelector('.preview-loading');
      const contentEl = popup.querySelector('.preview-content');
      
      if (loadingEl) loadingEl.style.display = 'none';
      
      const imageSection = data.image ? 
        `<div class="preview-image">
           <img src="${data.image}" alt="${data.title}" loading="lazy" onerror="this.parentElement.innerHTML='<div class=\\"preview-image-placeholder\\">🔗</div>'" />
         </div>` :
        `<div class="preview-image">
           <div class="preview-image-placeholder">🔗</div>
         </div>`;
      
      const html = `
        ${imageSection}
        <div class="preview-text">
          <div class="preview-domain">${data.domain}</div>
          <h4 class="preview-title">${data.title}</h4>
          ${data.description ? `<p class="preview-description">${data.description}</p>` : ''}
        </div>
      `;
      
      contentEl.innerHTML = html;
      contentEl.style.display = 'block';
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new DynamicLinkPreview();
    });
  } else {
    new DynamicLinkPreview();
  }
</script>