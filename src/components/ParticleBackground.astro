---
---

<div id="particle-canvas" class="fixed inset-0 pointer-events-none z-0"></div>

<script>
  class GradientParticleSystem {
    constructor() {
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.particles = [];
      this.mouse = { x: 0, y: 0 };
      
      this.init();
    }
    
    init() {
      const container = document.getElementById('particle-canvas');
      container.appendChild(this.canvas);
      
      this.resize();
      this.createParticles();
      this.animate();
      
      window.addEventListener('resize', () => this.resize());
      window.addEventListener('mousemove', (e) => {
        this.mouse.x = e.clientX;
        this.mouse.y = e.clientY;
      });
    }
    
    resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }
    
    createParticles() {
      const particleCount = Math.floor((this.canvas.width * this.canvas.height) / 12000);
      
      for (let i = 0; i < particleCount; i++) {
        this.particles.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          vx: (Math.random() - 0.5) * 0.8,
          vy: (Math.random() - 0.5) * 0.8,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.8 + 0.2,
          hue: Math.random() * 60 + 200, // Blue to cyan range
          saturation: 70 + Math.random() * 30,
          lightness: 50 + Math.random() * 30,
          pulseSpeed: 0.02 + Math.random() * 0.03
        });
      }
    }
    
    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      const time = Date.now() * 0.001;
      
      // Update and draw particles
      this.particles.forEach((particle, i) => {
        // Update position
        particle.x += particle.vx;
        particle.y += particle.vy;
        
        // Bounce off edges
        if (particle.x < 0 || particle.x > this.canvas.width) particle.vx *= -1;
        if (particle.y < 0 || particle.y > this.canvas.height) particle.vy *= -1;
        
        // Mouse interaction
        const dx = this.mouse.x - particle.x;
        const dy = this.mouse.y - particle.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 150) {
          const force = (150 - distance) / 150;
          particle.x -= dx * force * 0.02;
          particle.y -= dy * force * 0.02;
        }
        
        // Pulsing effect
        const pulse = Math.sin(time * particle.pulseSpeed + i) * 0.3 + 0.7;
        const currentOpacity = particle.opacity * pulse;
        
        // Create gradient for particle
        const gradient = this.ctx.createRadialGradient(
          particle.x, particle.y, 0,
          particle.x, particle.y, particle.size * 2
        );
        
        const color = `hsl(${particle.hue}, ${particle.saturation}%, ${particle.lightness}%)`;
        gradient.addColorStop(0, color);
        gradient.addColorStop(1, 'transparent');
        
        // Draw particle
        this.ctx.beginPath();
        this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        this.ctx.fillStyle = gradient;
        this.ctx.globalAlpha = currentOpacity;
        this.ctx.fill();
        
        // Draw connections
        for (let j = i + 1; j < this.particles.length; j++) {
          const other = this.particles[j];
          const dx = particle.x - other.x;
          const dy = particle.y - other.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
          
          if (distance < 120) {
            const connectionOpacity = (1 - distance / 120) * 0.3;
            
            // Create gradient for connection
            const connectionGradient = this.ctx.createLinearGradient(
              particle.x, particle.y, other.x, other.y
            );
            
            const color1 = `hsl(${particle.hue}, ${particle.saturation}%, ${particle.lightness}%)`;
            const color2 = `hsl(${other.hue}, ${other.saturation}%, ${other.lightness}%)`;
            
            connectionGradient.addColorStop(0, color1);
            connectionGradient.addColorStop(1, color2);
            
            this.ctx.beginPath();
            this.ctx.moveTo(particle.x, particle.y);
            this.ctx.lineTo(other.x, other.y);
            this.ctx.strokeStyle = connectionGradient;
            this.ctx.globalAlpha = connectionOpacity;
            this.ctx.lineWidth = 1;
            this.ctx.stroke();
          }
        }
      });
      
      this.ctx.globalAlpha = 1;
      requestAnimationFrame(() => this.animate());
    }
  }
  
  // Initialize particle system when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new GradientParticleSystem();
  });
</script>