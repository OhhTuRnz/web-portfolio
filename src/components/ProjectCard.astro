---
export interface Props {
  project: {
    id: string;
    title: string;
    description: string;
    shortDescription: string;
    technologies: string[];
    category: string;
    status: string;
    media?: {
      type: string;
      url: string;
      poster?: string;
      thumbnail?: string;
      fallback?: string; // YouTube thumbnail for static display
    };
    links: {
      github?: string;
      demo?: string;
      paper?: string;
    };
    featured?: boolean;
  };
  index?: number;
}

const { project, index = 0 } = Astro.props;

const techColors = {
  'Python': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
  'PyTorch': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
  'ROS2': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  'ROS': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  'C++': 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
  'JavaScript': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
  'React': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300',
  'MATLAB': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
  'OpenGL': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
  'TensorFlow': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-300',
  'Reinforcement Learning': 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
  'Advanced RL': 'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
  'Space Systems': 'bg-violet-100 text-violet-800 dark:bg-violet-900/30 dark:text-violet-300',
  'Kerbal': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
  'Mission Planning': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
  'Neural Networks': 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
  'Autonomous Systems': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900/30 dark:text-cyan-300',
  'Game AI': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
  'default': 'bg-gray-100 text-gray-800 dark:bg-gray-700/30 dark:text-gray-300'
};

const categoryColors = {
  'research': 'bg-blue-600',
  'personal': 'bg-purple-600'
};

const statusColors = {
  'active': 'text-green-400 bg-green-900/20 border-green-500/30',
  'completed': 'text-gray-400 bg-gray-900/20 border-gray-500/30'
};

// Helper function to check if URL is YouTube
const isYouTubeUrl = (url) => {
  return url && (url.includes('youtube.com') || url.includes('youtu.be'));
};

// Helper function to get YouTube video ID
const getYouTubeVideoId = (url) => {
  if (!url) return null;
  
  let videoId = null;
  
  if (url.includes('youtube.com/watch?v=')) {
    videoId = url.split('v=')[1]?.split('&')[0];
  } else if (url.includes('youtu.be/')) {
    videoId = url.split('youtu.be/')[1]?.split('?')[0];
  } else if (url.includes('youtube.com/embed/')) {
    videoId = url.split('embed/')[1]?.split('?')[0];
  }
  
  return videoId;
};

// Helper function to get YouTube thumbnail
const getYouTubeThumbnail = (url, quality = 'maxresdefault') => {
  const videoId = getYouTubeVideoId(url);
  if (!videoId) return null;
  
  return `https://img.youtube.com/vi/${videoId}/${quality}.jpg`;
};
---

<article 
  class="project-card group relative bg-slate-800/40 backdrop-blur-sm rounded-xl overflow-hidden border border-slate-700/30 hover:border-blue-500/50 transition-all duration-500 hover:transform hover:scale-105 hover:shadow-2xl"
  style={`animation-delay: ${index * 0.1}s;`}
  role="article"
  aria-labelledby={`project-title-${project.id}`}
  tabindex="0"
  data-project={JSON.stringify(project)}
>
  <!-- Media Section -->
  <div class="relative overflow-hidden aspect-video bg-slate-900/50">
    {project.media ? (
      project.media.type === 'gif' ? (
        <!-- GIF with Static YouTube Thumbnail and Hover-to-Play -->
        <div class="gif-demo-container relative w-full h-full group cursor-pointer" 
             data-demo-url={project.links?.demo}
             data-gif-url={project.media.url}
             data-fallback={project.media.fallback}>
          
          <!-- Static YouTube thumbnail - Always visible -->
          <div class="gif-preview-static absolute inset-0">
            <img 
              src={project.media.fallback || "https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800"}
              alt={`${project.title} - Demo Preview`}
              class="w-full h-full object-cover transition-all duration-700 group-hover:scale-105"
              loading="lazy"
            />
          </div>
          
          <!-- Animated GIF - Only visible on hover -->
          <div class="gif-preview-animated absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-500 z-10">
            <img 
              src={project.media.url}
              alt={`${project.title} - Live Demo`}
              class="w-full h-full object-cover transition-all duration-700 group-hover:scale-105"
              loading="lazy"
            />
          </div>
          
          <!-- Professional overlay with gradient -->
          <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-60 group-hover:opacity-40 transition-all duration-300 z-20"></div>
          
          <!-- Professional Play Button - Center (COMPLETELY HIDDEN ON HOVER) -->
          <div class="play-button-overlay absolute inset-0 flex items-center justify-center z-30 opacity-100 group-hover:opacity-0 group-hover:pointer-events-none transition-all duration-300">
            <div class="play-button-container relative">
              <!-- Subtle pulsing ring -->
              <div class="absolute inset-0 w-24 h-24 bg-blue-600/20 rounded-full animate-pulse"></div>
              
              <!-- Main YouTube-style play button -->
              <div class="relative w-24 h-24 bg-blue-600 rounded-full flex items-center justify-center shadow-2xl transform transition-all duration-300 hover:bg-blue-700 cursor-pointer">
                <svg class="w-10 h-10 text-white ml-1" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
              
              <!-- YouTube Logo (if demo link is YouTube) -->
              {project.links?.demo && isYouTubeUrl(project.links.demo) && (
                <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-lg">
                  <svg class="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                  </svg>
                </div>
              )}
            </div>
          </div>
          
          <!-- Demo Information Overlay - Bottom (HIDDEN ON HOVER) -->
          <div class="demo-info-overlay absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 to-transparent z-30 opacity-100 group-hover:opacity-0 transition-all duration-300">
            <div class="flex items-center justify-between">
              <div class="flex items-center space-x-2">
                <svg class="w-5 h-5 text-blue-400" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
                <span class="text-white text-sm font-medium">
                  {project.links?.demo && isYouTubeUrl(project.links.demo) ? 'Watch on YouTube' : 'View Demo'}
                </span>
              </div>
              <div class="text-white/80 text-xs">
                Hover to preview • Click to watch
              </div>
            </div>
          </div>
        </div>
      ) : project.media.type === 'video' ? (
        isYouTubeUrl(project.media.url) ? (
          <!-- YouTube Terms Compliant Video Display -->
          <div class="youtube-video-container relative w-full h-full" 
               data-video-url={project.media.url} 
               data-video-id={getYouTubeVideoId(project.media.url)}>
            
            <!-- High Quality Thumbnail with Click-to-Watch -->
            <div class="youtube-thumbnail-display relative w-full h-full cursor-pointer group">
              <!-- YouTube Thumbnail -->
              <img 
                src={getYouTubeThumbnail(project.media.url, 'maxresdefault')}
                alt={`${project.title} - YouTube Video Thumbnail`}
                class="w-full h-full object-cover transition-all duration-700 group-hover:scale-110 group-hover:brightness-90"
                loading="lazy"
                onerror={`
                  this.onerror=null;
                  this.src='${getYouTubeThumbnail(project.media.url, 'hqdefault')}';
                  this.onerror=function(){
                    this.onerror=null;
                    this.src='https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800';
                  };
                `}
              />
              
              <!-- Elegant Overlay with YouTube Branding -->
              <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-60 group-hover:opacity-40 transition-all duration-300"></div>
              
              <!-- Professional Play Button -->
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="play-button-container relative">
                  <!-- Subtle pulsing ring -->
                  <div class="absolute inset-0 w-24 h-24 bg-red-600/20 rounded-full animate-pulse"></div>
                  
                  <!-- Main YouTube-style play button -->
                  <div class="relative w-24 h-24 bg-red-600 rounded-full flex items-center justify-center shadow-2xl transform group-hover:scale-110 transition-all duration-300 hover:bg-red-700 cursor-pointer">
                    <svg class="w-10 h-10 text-white ml-1" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                  
                  <!-- YouTube Logo -->
                  <div class="absolute -bottom-2 -right-2 w-8 h-8 bg-white rounded-full flex items-center justify-center shadow-lg">
                    <svg class="w-5 h-5 text-red-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                    </svg>
                  </div>
                </div>
              </div>
              
              <!-- Video Information Overlay -->
              <div class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 to-transparent">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-2">
                    <svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
                    </svg>
                    <span class="text-white text-sm font-medium">Watch on YouTube</span>
                  </div>
                  <div class="text-white/80 text-xs">
                    Click to open
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <!-- Regular Video with Static Thumbnail Preview -->
          <div class="video-demo-container relative w-full h-full cursor-pointer group" 
               data-video-url={project.media.url}
               data-poster={project.media.poster || project.media.thumbnail}>
            
            <!-- Static thumbnail preview -->
            <div class="video-preview-static absolute inset-0">
              <img 
                src={project.media.poster || project.media.thumbnail || "https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg?auto=compress&cs=tinysrgb&w=800"}
                alt={`${project.title} - Video Preview`}
                class="w-full h-full object-cover transition-all duration-700 group-hover:scale-105"
                loading="lazy"
              />
            </div>
            
            <!-- Professional overlay with gradient -->
            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-60 group-hover:opacity-40 transition-all duration-300"></div>
            
            <!-- Video Demo Badge - Top Left -->
            <div class="absolute top-4 left-4 bg-purple-600 text-white px-3 py-1.5 rounded-full text-xs font-semibold flex items-center gap-2 shadow-lg">
              <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
              </svg>
              Video Demo
            </div>
            
            <!-- Professional Play Button - Center -->
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="play-button-container relative">
                <!-- Subtle pulsing ring -->
                <div class="absolute inset-0 w-24 h-24 bg-purple-600/20 rounded-full animate-pulse"></div>
                
                <!-- Main play button -->
                <div class="relative w-24 h-24 bg-purple-600 rounded-full flex items-center justify-center shadow-2xl transform group-hover:scale-110 transition-all duration-300 hover:bg-purple-700 cursor-pointer">
                  <svg class="w-10 h-10 text-white ml-1" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- Video Information Overlay - Bottom -->
            <div class="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/90 to-transparent">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-2">
                  <svg class="w-5 h-5 text-purple-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                  <span class="text-white text-sm font-medium">Play Video</span>
                </div>
                <div class="text-white/80 text-xs">
                  Click to play
                </div>
              </div>
            </div>
          </div>
        )
      ) : (
        <div class="relative w-full h-full">
          <img 
            src={project.media.url} 
            alt={`${project.title} preview`}
            class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
            loading="lazy"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-slate-900/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        </div>
      )
    ) : (
      <!-- Fallback gradient -->
      <div class="w-full h-full bg-gradient-to-br from-blue-600/20 via-purple-600/20 to-cyan-600/20 flex items-center justify-center">
        <div class="text-white/30 text-6xl">
          {project.category === 'research' ? '🔬' : '🚀'}
        </div>
      </div>
    )}
    
    <!-- Category and Status badges - HIGHER Z-INDEX TO ENSURE VISIBILITY -->
    <div class="absolute top-4 right-4 flex items-center space-x-2 z-50">
      <span class={`px-3 py-1 rounded-full text-xs font-semibold text-white shadow-lg backdrop-blur-sm ${categoryColors[project.category]}`}>
        {project.category === 'research' ? '🔬 Research' : '🚀 Personal'}
      </span>
      {project.featured && (
        <span class="px-2 py-1 text-xs font-medium text-yellow-300 bg-yellow-600/80 backdrop-blur-sm rounded-full border border-yellow-500/50 shadow-lg">
          ⭐ Featured
        </span>
      )}
    </div>
    
    <div class="absolute bottom-4 right-4 z-50">
      <span class={`px-2 py-1 text-xs font-medium rounded-full border backdrop-blur-sm shadow-lg ${statusColors[project.status]}`}>
        {project.status}
      </span>
    </div>
  </div>

  <!-- Content -->
  <div class="p-6 flex flex-col flex-grow">
    <h3 id={`project-title-${project.id}`} class="text-xl font-semibold text-white mb-3 group-hover:text-blue-400 transition-colors leading-tight">
      {project.title}
    </h3>
    
    <p class="text-gray-300 mb-4 leading-relaxed flex-grow text-sm">
      {project.shortDescription}
    </p>
    
    <!-- Technologies -->
    <div class="flex flex-wrap gap-2 mb-6" role="list" aria-label="Technologies used">
      {project.technologies.slice(0, 4).map(tech => (
        <span 
          class={`px-3 py-1 text-xs font-medium rounded-full transition-all hover:scale-105 ${techColors[tech] || techColors.default}`}
          role="listitem"
        >
          {tech}
        </span>
      ))}
      {project.technologies.length > 4 && (
        <span class="px-3 py-1 text-xs font-medium rounded-full bg-gray-700/50 text-gray-300">
          +{project.technologies.length - 4} more
        </span>
      )}
    </div>
    
    <!-- Action buttons -->
    <div class="flex flex-wrap gap-3 mt-auto" role="group" aria-label="Project links">
      {project.links.github && (
        <a 
          href={project.links.github} 
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center space-x-2 text-gray-300 hover:text-white transition-colors hover:bg-slate-700/50 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500/50"
          aria-label={`View ${project.title} source code on GitHub`}
        >
          <i class="fab fa-github" aria-hidden="true"></i>
          <span class="text-sm">Code</span>
        </a>
      )}
      
      {project.links.demo && (
        <a 
          href={project.links.demo}
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center space-x-2 text-blue-400 hover:text-blue-300 transition-colors hover:bg-blue-900/20 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500/50"
          aria-label={`View ${project.title} demo`}
        >
          {isYouTubeUrl(project.links.demo) ? (
            <i class="fab fa-youtube" aria-hidden="true"></i>
          ) : (
            <i class="fas fa-external-link-alt" aria-hidden="true"></i>
          )}
          <span class="text-sm">{isYouTubeUrl(project.links.demo) ? 'Video' : 'Demo'}</span>
        </a>
      )}
      
      {project.links.paper && (
        <a 
          href={project.links.paper}
          target="_blank"
          rel="noopener noreferrer"
          class="flex items-center space-x-2 text-purple-400 hover:text-purple-300 transition-colors hover:bg-purple-900/20 px-3 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500/50"
          aria-label={`Read ${project.title} research paper`}
        >
          <i class="fas fa-file-pdf" aria-hidden="true"></i>
          <span class="text-sm">Paper</span>
        </a>
      )}
    </div>
  </div>
</article>

<style>
  .project-card {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .aspect-video {
    aspect-ratio: 16 / 9;
  }
  
  /* Enhanced hover effects */
  .project-card:hover {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
  }
  
  /* Focus styles for accessibility */
  .project-card:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* GIF container styling with hover-to-play */
  .gif-demo-container {
    position: relative;
    overflow: hidden;
  }
  
  .gif-preview-static {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 5;
  }
  
  .gif-preview-animated {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
  }
  
  /* Play button overlay - completely hidden on hover */
  .play-button-overlay {
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .gif-demo-container:hover .play-button-overlay {
    opacity: 0 !important;
    visibility: hidden;
    pointer-events: none;
  }
  
  /* Demo info overlay - completely hidden on hover */
  .demo-info-overlay {
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .gif-demo-container:hover .demo-info-overlay {
    opacity: 0 !important;
    visibility: hidden;
  }
  
  /* Smooth transitions for GIF hover effect */
  .gif-demo-container:hover .gif-preview-static {
    opacity: 0;
  }
  
  .gif-demo-container:hover .gif-preview-animated {
    opacity: 1;
  }
  
  /* Video container styling */
  .video-demo-container {
    position: relative;
    overflow: hidden;
  }
  
  .video-preview-static {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 5;
  }
  
  /* YouTube compliant styling */
  .youtube-thumbnail-display {
    transition: all 0.3s ease;
  }
  
  .youtube-thumbnail-display:hover {
    transform: scale(1.02);
  }
  
  /* Enhanced play button styling */
  .play-button-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .play-button-container:hover .relative {
    transform: scale(1.15);
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.6);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .play-button-container .relative {
      width: 20px;
      height: 20px;
    }
    
    .play-button-container svg {
      width: 8px;
      height: 8px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('.project-card');
    
    projectCards.forEach(card => {
      const youtubeContainer = card.querySelector('.youtube-video-container');
      const gifContainer = card.querySelector('.gif-demo-container');
      const videoContainer = card.querySelector('.video-demo-container');
      
      // Handle YouTube video clicks (Terms Compliant)
      if (youtubeContainer) {
        const videoUrl = youtubeContainer.dataset.videoUrl;
        const thumbnailDisplay = youtubeContainer.querySelector('.youtube-thumbnail-display');
        
        if (videoUrl && thumbnailDisplay) {
          // Click to open YouTube in new tab (Compliant with Terms)
          thumbnailDisplay.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Open YouTube in new tab - fully compliant
            window.open(videoUrl, '_blank', 'noopener,noreferrer');
          });
          
          // Keyboard accessibility
          thumbnailDisplay.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              e.stopPropagation();
              window.open(videoUrl, '_blank', 'noopener,noreferrer');
            }
          });
          
          // Set accessibility attributes
          thumbnailDisplay.setAttribute('tabindex', '0');
          thumbnailDisplay.setAttribute('role', 'button');
          thumbnailDisplay.setAttribute('aria-label', `Watch ${card.querySelector('h3')?.textContent || 'video'} on YouTube`);
        }
      }
      
      // Handle GIF demo interactions with click-to-YouTube
      if (gifContainer) {
        const demoUrl = gifContainer.dataset.demoUrl;
        
        if (demoUrl) {
          // Click to open demo (YouTube or other)
          gifContainer.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            window.open(demoUrl, '_blank', 'noopener,noreferrer');
          });
          
          // Keyboard accessibility
          gifContainer.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              e.stopPropagation();
              window.open(demoUrl, '_blank', 'noopener,noreferrer');
            }
          });
          
          // Set accessibility attributes
          gifContainer.setAttribute('tabindex', '0');
          gifContainer.setAttribute('role', 'button');
          gifContainer.setAttribute('aria-label', `Watch ${card.querySelector('h3')?.textContent || 'demo'} video`);
        }
      }
      
      // Handle regular video demo interactions
      if (videoContainer) {
        const videoUrl = videoContainer.dataset.videoUrl;
        
        if (videoUrl) {
          // Click to play video (could open in modal or new tab)
          videoContainer.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // For now, open in new tab - you could implement a modal player here
            window.open(videoUrl, '_blank', 'noopener,noreferrer');
          });
          
          // Keyboard accessibility
          videoContainer.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              e.stopPropagation();
              window.open(videoUrl, '_blank', 'noopener,noreferrer');
            }
          });
          
          // Set accessibility attributes
          videoContainer.setAttribute('tabindex', '0');
          videoContainer.setAttribute('role', 'button');
          videoContainer.setAttribute('aria-label', `Play ${card.querySelector('h3')?.textContent || 'video'} demo`);
        }
      }
    });
  });
</script>