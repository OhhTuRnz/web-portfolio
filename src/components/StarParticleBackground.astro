---
---

<div id="star-canvas" class="fixed inset-0 pointer-events-none z-0"></div>

<script>
  class StarParticleSystem {
    constructor() {
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.stars = [];
      this.mouse = { x: 0, y: 0 };
      this.animationId = null;
      
      this.init();
    }
    
    init() {
      const container = document.getElementById('star-canvas');
      if (!container) return;
      
      container.appendChild(this.canvas);
      
      this.resize();
      this.createStars();
      this.animate();
      
      window.addEventListener('resize', () => this.resize());
      window.addEventListener('mousemove', (e) => {
        this.mouse.x = e.clientX;
        this.mouse.y = e.clientY;
      });
    }
    
    resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }
    
    createStars() {
      const starCount = Math.floor((this.canvas.width * this.canvas.height) / 12000);
      this.stars = [];
      
      for (let i = 0; i < starCount; i++) {
        this.stars.push({
          x: Math.random() * this.canvas.width,
          y: Math.random() * this.canvas.height,
          vx: (Math.random() - 0.5) * 0.3,
          vy: (Math.random() - 0.5) * 0.3,
          size: Math.random() * 2 + 0.5,
          opacity: Math.random() * 0.8 + 0.2,
          twinkleSpeed: 0.01 + Math.random() * 0.02,
          hue: 200 + Math.random() * 60, // Blue to cyan range
          brightness: 50 + Math.random() * 30
        });
      }
    }
    
    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      const time = Date.now() * 0.001;
      
      this.stars.forEach((star, i) => {
        // Update position
        star.x += star.vx;
        star.y += star.vy;
        
        // Wrap around edges
        if (star.x < 0) star.x = this.canvas.width;
        if (star.x > this.canvas.width) star.x = 0;
        if (star.y < 0) star.y = this.canvas.height;
        if (star.y > this.canvas.height) star.y = 0;
        
        // Mouse interaction - gentle repulsion
        const dx = this.mouse.x - star.x;
        const dy = this.mouse.y - star.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < 100) {
          const force = (100 - distance) / 100;
          star.x -= dx * force * 0.01;
          star.y -= dy * force * 0.01;
        }
        
        // Twinkling effect
        const twinkle = Math.sin(time * star.twinkleSpeed + i) * 0.3 + 0.7;
        const currentOpacity = star.opacity * twinkle;
        
        // Draw individual star with gradient
        const gradient = this.ctx.createRadialGradient(
          star.x, star.y, 0,
          star.x, star.y, star.size * 3
        );
        
        const color = `hsl(${star.hue}, 70%, ${star.brightness}%)`;
        gradient.addColorStop(0, color);
        gradient.addColorStop(0.4, `hsla(${star.hue}, 70%, ${star.brightness}%, 0.6)`);
        gradient.addColorStop(1, 'transparent');
        
        this.ctx.beginPath();
        this.ctx.arc(star.x, star.y, star.size, 0, Math.PI * 2);
        this.ctx.fillStyle = gradient;
        this.ctx.globalAlpha = currentOpacity;
        this.ctx.fill();
        
        // Add subtle glow for larger stars
        if (star.size > 1.5) {
          this.ctx.beginPath();
          this.ctx.arc(star.x, star.y, star.size * 2, 0, Math.PI * 2);
          this.ctx.fillStyle = `hsla(${star.hue}, 70%, ${star.brightness}%, 0.1)`;
          this.ctx.globalAlpha = currentOpacity * 0.5;
          this.ctx.fill();
        }
      });
      
      this.ctx.globalAlpha = 1;
      this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    destroy() {
      if (this.animationId) {
        cancelAnimationFrame(this.animationId);
      }
      if (this.canvas.parentNode) {
        this.canvas.parentNode.removeChild(this.canvas);
      }
    }
  }
  
  // Initialize star system when DOM is loaded
  let starSystem = null;
  
  document.addEventListener('DOMContentLoaded', () => {
    starSystem = new StarParticleSystem();
  });
  
  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    if (starSystem) {
      starSystem.destroy();
    }
  });
</script>