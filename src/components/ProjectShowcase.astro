---
import { getAllProjects, getFeaturedProjects } from '../data/projects.js';
import ProjectCard from './ProjectCard.astro';
import StarParticleBackground from './StarParticleBackground.astro';

const allProjects = getAllProjects();
const featuredProjects = getFeaturedProjects();
---

<section id="projects" class="relative min-h-screen py-20 bg-slate-900 overflow-hidden">
  <StarParticleBackground />
  
  <!-- Content overlay -->
  <div class="relative z-10">
    <div class="arclab-container">
      <!-- Header -->
      <div class="text-center mb-16 arclab-fade-in">
        <h2 class="arclab-heading-2 mb-4">Projects</h2>
        <p class="arclab-text text-lg max-w-3xl mx-auto">
          Research and personal projects exploring artificial intelligence and robotics
        </p>
      </div>
      
      <!-- Filter Navigation -->
      <div class="flex flex-wrap justify-center gap-4 mb-12 arclab-fade-in" style="animation-delay: 0.2s;">
        <button 
          class="filter-btn active" 
          data-filter="all"
          aria-label="Show all projects"
        >
          All Projects
        </button>
        <button 
          class="filter-btn" 
          data-filter="featured"
          aria-label="Show featured projects"
        >
          ‚≠ê Featured
        </button>
        <button 
          class="filter-btn" 
          data-filter="research"
          aria-label="Show research projects"
        >
          üî¨ Research
        </button>
        <button 
          class="filter-btn" 
          data-filter="personal"
          aria-label="Show personal projects"
        >
          üöÄ Personal
        </button>
        <button 
          class="filter-btn" 
          data-filter="active"
          aria-label="Show active projects"
        >
          üü¢ Active
        </button>
      </div>
      
      <!-- Projects Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8" id="projects-grid">
        {allProjects.map((project, index) => (
          <ProjectCard project={project} index={index} />
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    
    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        
        // Update active button
        filterButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');
        
        // Filter projects with smooth animation
        filterProjects(filter);
      });
    });
    
    function filterProjects(filter) {
      projectCards.forEach((card, index) => {
        const shouldShow = shouldShowCard(card, filter);
        
        if (shouldShow) {
          card.style.display = 'block';
          setTimeout(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, index * 50);
        } else {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          setTimeout(() => {
            card.style.display = 'none';
          }, 300);
        }
      });
    }
    
    function shouldShowCard(card, filter) {
      if (filter === 'all') return true;
      
      const category = card.getAttribute('data-category');
      const status = card.getAttribute('data-status');
      const featured = card.getAttribute('data-featured') === 'true';
      
      switch (filter) {
        case 'featured':
          return featured;
        case 'research':
          return category === 'research';
        case 'personal':
          return category === 'personal';
        case 'active':
          return status === 'active';
        default:
          return true;
      }
    }
    
    // Add data attributes to cards for filtering
    projectCards.forEach(card => {
      const cardData = JSON.parse(card.getAttribute('data-project') || '{}');
      
      card.setAttribute('data-category', cardData.category || 'personal');
      card.setAttribute('data-status', cardData.status || 'completed');
      card.setAttribute('data-featured', cardData.featured || 'false');
      
      // Set initial styles for smooth transitions
      card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    });
    
    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);
    
    // Observe all project cards
    projectCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>

<style>
  /* Enhanced filter button styling */
  .filter-btn {
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.05);
    color: var(--arclab-gray-300);
    cursor: pointer;
    position: relative;
    overflow: hidden;
  }
  
  .filter-btn.active {
    background: var(--arclab-accent);
    color: white;
    border-color: var(--arclab-accent);
    box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  }
  
  .filter-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    color: white;
    transform: translateY(-2px);
  }
  
  .filter-btn.active:hover {
    background: var(--arclab-blue);
    box-shadow: 0 6px 16px rgba(37, 99, 235, 0.4);
  }
  
  /* Scroll animation classes */
  .animate-in {
    animation: slideInUp 0.6s ease-out forwards;
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive grid improvements */
  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .filter-btn {
      padding: 8px 16px;
      font-size: 0.8rem;
    }
  }
</style>