---
import { getAllProjects } from '../data/projects.js';
import ProjectCard from './ProjectCard.astro';

const allProjects = getAllProjects();
---

<section id="projects" class="arclab-section bg-slate-900">
  <div class="arclab-container">
    <!-- Header -->
    <div class="text-center mb-16 arclab-fade-in">
      <h2 class="arclab-heading-2 mb-4">Projects</h2>
      <p class="arclab-text text-lg max-w-3xl mx-auto">
        Research and personal projects exploring artificial intelligence and robotics
      </p>
    </div>
    
    <!-- Filter Navigation -->
    <div class="flex flex-wrap justify-center gap-4 mb-12 arclab-fade-in" style="animation-delay: 0.2s;">
      <button 
        class="project-filter-btn active" 
        data-filter="all"
        aria-label="Show all projects"
      >
        <i class="fas fa-th-large mr-2"></i>
        All Projects
      </button>
      <button 
        class="project-filter-btn" 
        data-filter="research"
        aria-label="Show research projects"
      >
        <i class="fas fa-flask mr-2"></i>
        Research
      </button>
      <button 
        class="project-filter-btn" 
        data-filter="personal"
        aria-label="Show personal projects"
      >
        <i class="fas fa-rocket mr-2"></i>
        Personal
      </button>
      <button 
        class="project-filter-btn" 
        data-filter="ongoing"
        aria-label="Show ongoing projects"
      >
        <i class="fas fa-play-circle mr-2"></i>
        Ongoing
      </button>
    </div>
    
    <!-- Projects Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-2 gap-8 max-w-6xl mx-auto" id="projects-grid">
      {allProjects.map((project, index) => (
        <ProjectCard project={project} index={index} />
      ))}
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.project-filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    
    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        
        // Update active button
        filterButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.setAttribute('aria-pressed', 'false');
        });
        button.classList.add('active');
        button.setAttribute('aria-pressed', 'true');
        
        // Filter projects with smooth animation
        filterProjects(filter);
      });
    });
    
    function filterProjects(filter) {
      projectCards.forEach((card, index) => {
        const shouldShow = shouldShowCard(card, filter);
        
        if (shouldShow) {
          card.style.display = 'block';
          setTimeout(() => {
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
          }, index * 50);
        } else {
          card.style.opacity = '0';
          card.style.transform = 'translateY(20px)';
          setTimeout(() => {
            card.style.display = 'none';
          }, 300);
        }
      });
    }
    
    function shouldShowCard(card, filter) {
      if (filter === 'all') return true;
      
      const category = card.getAttribute('data-category');
      const status = card.getAttribute('data-status');
      
      switch (filter) {
        case 'research':
          return category === 'research';
        case 'personal':
          return category === 'personal';
        case 'ongoing':
          return status === 'active';
        default:
          return true;
      }
    }
    
    // Add data attributes to cards for filtering
    projectCards.forEach(card => {
      const cardData = JSON.parse(card.getAttribute('data-project') || '{}');
      
      card.setAttribute('data-category', cardData.category || 'personal');
      card.setAttribute('data-status', cardData.status || 'completed');
      
      // Set initial styles for smooth transitions
      card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    });
    
    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);
    
    // Observe all project cards
    projectCards.forEach(card => {
      observer.observe(card);
    });
  });
</script>

<style>
  /* Enhanced filter button styling with Astro-inspired design */
  .project-filter-btn {
    padding: 12px 24px;
    border-radius: 12px;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    background: rgba(15, 23, 42, 0.8);
    color: var(--arclab-gray-300);
    cursor: pointer;
    position: relative;
    overflow: hidden;
    backdrop-filter: blur(12px);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .project-filter-btn::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(168, 85, 247, 0.1));
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .project-filter-btn.active {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2), rgba(168, 85, 247, 0.2));
    color: white;
    border-color: rgba(59, 130, 246, 0.5);
    box-shadow: 
      0 4px 12px rgba(59, 130, 246, 0.2),
      0 0 0 1px rgba(59, 130, 246, 0.1);
  }
  
  .project-filter-btn.active::before {
    opacity: 1;
  }
  
  .project-filter-btn:hover {
    background: rgba(59, 130, 246, 0.1);
    color: white;
    transform: translateY(-2px);
    border-color: rgba(59, 130, 246, 0.4);
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
  }
  
  .project-filter-btn.active:hover {
    transform: translateY(-2px);
    box-shadow: 
      0 8px 25px rgba(59, 130, 246, 0.3),
      0 0 0 1px rgba(59, 130, 246, 0.2);
  }
  
  .project-filter-btn i {
    font-size: 0.8rem;
    opacity: 0.8;
  }
  
  .project-filter-btn.active i {
    opacity: 1;
  }
  
  /* Scroll animation classes */
  .animate-in {
    animation: slideInUp 0.6s ease-out forwards;
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive improvements */
  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .project-filter-btn {
      padding: 10px 18px;
      font-size: 0.8rem;
      border-radius: 10px;
    }
    
    .project-filter-btn i {
      margin-right: 0.4rem;
    }
  }
  
  @media (max-width: 480px) {
    .flex {
      gap: 0.5rem;
    }
    
    .project-filter-btn {
      padding: 8px 14px;
      font-size: 0.75rem;
    }
  }
</style>